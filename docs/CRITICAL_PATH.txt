# CRITICAL PATH - Hey Orac Voice Control System

## üö® TOP PRIORITY: WAKE WORD DETECTION NOT WORKING

### ‚ùå **CRITICAL ISSUE: Wake Word Detection Broken**

**Status**: **RED** - Wake word detection is NOT working despite system appearing operational
**Issue**: OpenWakeWord consistently returns 0.0000 confidence for ALL audio input
**Evidence**: 
- 30+ seconds of monitoring shows 0.0000 confidence for all audio chunks
- Audio activity detected (RMS spikes up to 27.15, Max up to 88) but no confidence increase
- System processes audio but never detects wake word
- Threshold set to 0.01 but confidence never rises above 0.0000

**Root Cause**: **HYPOTHESIS IDENTIFIED** - Prediction key mismatch in OpenWakeWord engine
**Impact**: System cannot respond to voice commands - core functionality broken
**Priority**: **URGENT** - This is blocking all voice control functionality

### üîç **ROOT CAUSE HYPOTHESIS: Prediction Key Mismatch**

**Hypothesis**: OpenWakeWord models return prediction keys with `_v0.1` suffix (e.g., `hey_jarvis_v0.1`) but our code is looking for base keyword names (e.g., `hey_jarvis`).

**Evidence from Debugging**:
- All models return keys with `_v0.1` suffix: `{'hey_jarvis_v0.1': 0.0}`, `{'alexa_v0.1': 0.0}`, `{'hey_mycroft_v0.1': 0.0}`
- Class mapping has no effect on prediction keys - models ignore our `class_mapping_dicts` parameter
- Our code was looking for `'hey_jarvis'` but model only returns `'hey_jarvis_v0.1'`
- This explains why confidence was always 0.0000 - we never found the correct prediction key

**Fix Applied**: Updated key lookup order to prioritize `_v0.1` suffix keys
**Status**: **NEEDS CONFIRMATION** - Deploy and test to verify hypothesis is correct

### üîç **Immediate Debugging Required**
1. **Test with known wake word audio** - verify if model responds to "hey jarvis"
2. **Check audio preprocessing** - ensure format matches model expectations
3. **Verify model loading** - confirm OpenWakeWord model is loaded correctly
4. **Test different models** - try other OpenWakeWord models (alexa, hey_mycroft)
5. **Audio format validation** - check sample rate, channels, encoding
6. **Model compatibility** - verify OpenWakeWord version and model compatibility

---

## üéâ CURRENT STATUS SUMMARY (Updated: July 7, 2025)

### ‚ö†Ô∏è **SYSTEM PARTIALLY OPERATIONAL - WAKE WORD BROKEN**

**Overall Status**: **YELLOW** - Infrastructure working but core functionality broken
**Deployment**: **SUCCESSFUL** - One-command deployment working reliably
**Audio System**: **FULLY FUNCTIONAL** - USB microphone detected and working
**Wake Word Detection**: **‚ùå BROKEN** - OpenWakeWord engine running but not detecting
**Performance**: **EXCELLENT** - Real-time processing, low latency, stable operation

### üìä **System Health Metrics**
- **Container Status**: ‚úÖ Up (healthy) - Port 8080 exposed
- **Memory Usage**: 893MB/15GB (6%) - Excellent resource utilization
- **Disk Usage**: 7.2GB/235GB (4%) - Plenty of storage available
- **Audio Hardware**: ‚úÖ SH-04 USB microphone detected and accessible
- **Wake Word Engine**: ‚ùå OpenWakeWord running but not detecting wake words
- **Processing**: ‚úÖ Real-time audio chunks every ~80ms
- **Error Rate**: ‚úÖ 0% - No errors or crashes in production

### üéØ **Key Achievements**
1. **‚úÖ Complete Infrastructure**: Docker, SSH, deployment all working
2. **‚úÖ Audio System**: USB microphone detection and recording confirmed
3. **‚ùå Wake Word Detection**: OpenWakeWord integration broken - needs debugging
4. **‚úÖ Real-time Processing**: 80ms audio chunks, immediate detection capability
5. **‚úÖ Production Deployment**: One-command deployment script working
6. **‚úÖ Resource Management**: Proper device isolation and cleanup
7. **‚úÖ Monitoring**: Comprehensive logging and diagnostics

### üîß **Current Configuration**
- **Wake Word**: "hey_jarvis" (OpenWakeWord engine)
- **Threshold**: 0.01 (sensitive but not triggering false positives)
- **Audio Device**: SH-04 USB microphone (hw:0,0)
- **Sample Rate**: 16kHz, Mono, 512-byte chunks
- **Processing**: Continuous streaming with pre/post-roll buffers

### üöÄ **Next Steps**
1. **URGENT**: Debug wake word detection issue
2. **TEST**: Verify with known wake word audio files
3. **FIX**: Resolve audio preprocessing or model compatibility issues
4. **VALIDATE**: Confirm wake word detection works before proceeding

---

## üö® CRITICAL ISSUE: OpenWakeWord Always Returns 0.0000 Confidence

**Status**: ‚ùå **BROKEN** - Wake word detection not working, requires immediate debugging
**Issue**: OpenWakeWord models return 0.0000 confidence for all audio (silence, noise, speech)
**Root Cause**: **UNKNOWN** - Need to debug audio preprocessing, model loading, or compatibility
**Next Action**: **URGENT** - Test with known wake word audio, check audio format, verify model

**Recent Fixes Applied**:
- ‚úÖ Fixed prediction key mapping (`alexa_v0.1` vs `alexa`)
- ‚úÖ Enhanced debugging and audio preprocessing validation
- ‚úÖ Switched from `alexa` to `hey_jarvis` model
- ‚úÖ Added integrated OpenWakeWord testing during startup
- ‚úÖ Lowered threshold to 0.01 for testing sensitivity
- ‚úÖ **HYPOTHESIS IDENTIFIED** - Prediction key mismatch with `_v0.1` suffix
- ‚úÖ **FIX APPLIED** - Updated key lookup to prioritize `_v0.1` suffix keys
- ‚è≥ **NEEDS CONFIRMATION** - Deploy and test to verify fix resolves issue

**Available Models**: `['alexa', 'hey_mycroft', 'hey_jarvis', 'timer', 'weather']`
**Current Config**: `keyword: "hey_jarvis", threshold: 0.01`

---

## üö® IMMEDIATE NEXT STEPS (Phase 1a - Basic Project Running)

### 1. üî• URGENT: Confirm and Fix Wake Word Detection
- [x] **HYPOTHESIS IDENTIFIED** - Prediction key mismatch with `_v0.1` suffix
- [x] **FIX APPLIED** - Updated key lookup to prioritize `_v0.1` suffix keys
- [ ] **CONFIRM FIX** - Deploy and test to verify hypothesis is correct
- [ ] **TEST WITH REAL AUDIO** - Verify wake word detection works with actual speech
- [ ] **VALIDATE THRESHOLD** - Adjust threshold if needed after fix confirmation
- [ ] **PERFORMANCE TEST** - Ensure detection latency is acceptable (< 100ms)

### 2. Fix PATH Warnings in Docker Container
- [x] Update Dockerfile to add `/home/appuser/.local/bin` to PATH
- [x] Test that pytest, black, flake8 commands work without warnings
- [x] Verify all development tools are accessible

### 3. Implement Basic Main Service Loop
- [x] Replace placeholder "Main service loop not yet implemented" in main.py
- [x] Add basic audio device enumeration and selection
- [x] Implement simple audio capture loop (without wake-word detection yet)
- [x] Add graceful shutdown handling (Ctrl+C)

### 4. Test Audio Hardware Access
- [x] Verify USB microphone is detected on Pi
- [x] Test basic audio capture functionality
- [x] Ensure audio permissions work in Docker container
- [x] Add audio device listing functionality

### 5. Basic Wake-Word Detection
- [x] Implement Porcupine initialization
- [x] Add basic wake-word detection loop
- [x] Test with sample audio or microphone input
- [x] Add logging for detection events

### 6. Continuous Streaming Wake-Word Detection
- [x] Replace 2-second test windows with continuous audio streaming
- [x] Implement real-time audio processing pipeline
- [x] Configure OpenWakeWord for continuous detection (80ms frames)
- [x] Add immediate wake-word detection without artificial delays
- [x] Test continuous listening mode with "hey jarvis" wake word
- [x] Ensure low-latency detection (< 100ms from speech to detection)
- [x] Add proper audio buffer management for continuous streaming

### 7. End-to-End Testing
- [x] Test complete pipeline: mic ‚Üí wake-word ‚Üí audio capture
- [x] Verify audio quality and format
- [x] Test deployment script with working application
- [x] Measure basic latency

## ‚úÖ COMPLETED MILESTONES

### Infrastructure Setup
- [x] GitHub repository created (hey-orac)
- [x] Project structure established
- [x] Docker and Docker Compose configured
- [x] SSH connection to Pi working
- [x] Deployment script created and tested
- [x] Non-root user security implemented
- [x] Python 3.12 compatibility fixed (numpy 1.26.4)
- [x] All dependencies installed successfully
- [x] Container builds and runs successfully
- [x] Configuration loading works
- [x] Basic test framework in place

### Audio System
- [x] USB microphone detection and enumeration
- [x] PyAudio integration and device management
- [x] Audio stream initialization and cleanup
- [x] Real-time audio capture and processing
- [x] Audio buffer management (pre/post-roll)
- [x] Device conflict resolution and isolation testing

### Wake Word Detection
- [x] OpenWakeWord engine integration
- [x] Continuous audio streaming implementation
- [x] Real-time confidence scoring
- [x] Threshold-based detection system
- [x] Comprehensive logging and monitoring
- [x] Performance optimization and latency reduction
- ‚ùå **BROKEN**: Actual wake word detection not working

### Current Status
- **Container**: ‚úÖ Running successfully
- **Dependencies**: ‚úÖ All installed (PyAudio, Porcupine, etc.)
- **Configuration**: ‚úÖ Loading correctly
- **Deployment**: ‚úÖ Script working
- **Security**: ‚úÖ Non-root user implemented
- **Audio System**: ‚úÖ USB microphone working
- **Wake Word Detection**: ‚ùå OpenWakeWord operational but not detecting
- **Real-time Processing**: ‚úÖ Continuous streaming active

## üîß TECHNICAL DEBT TO ADDRESS

### PATH Warnings (Low Priority)
The following warnings appear during pip install but don't affect functionality:
```
WARNING: The script pytest is installed in '/home/appuser/.local/bin' which is not on PATH.
WARNING: The script black is installed in '/home/appuser/.local/bin' which is not on PATH.
WARNING: The script flake8 is installed in '/home/appuser/.local/bin' which is not on PATH.
```

**Solution**: Add to Dockerfile:
```dockerfile
ENV PATH="/home/appuser/.local/bin:$PATH"
```

### Test Execution (Medium Priority)
- [ ] Fix pytest command format in deployment script
- [ ] Ensure tests run properly in container
- [ ] Add more comprehensive test coverage

## üìã PHASE 1a COMPLETION CRITERIA

### Core Functionality
- [x] Wake-word detection working with USB microphone
- [x] Continuous audio streaming and real-time processing
- [x] Audio capture and buffering implemented
- [x] Basic streaming to mock endpoint
- [x] Latency < 150ms target
- [x] Graceful error handling
- ‚ùå **BROKEN**: Wake word detection not working

### Quality Assurance
- [x] All tests passing
- [x] No critical warnings in logs
- [x] Deployment script reliable
- [x] Documentation updated

### Performance Targets
- [x] Wake-word detection accuracy > 95%
- [x] False positive rate < 1%
- [x] End-to-end latency < 150ms
- [x] Memory usage < 200MB
- [x] CPU usage reasonable on Pi
- ‚ùå **BROKEN**: Cannot measure accuracy - detection not working

## üéØ SUCCESS METRICS

### Phase 1a Success Criteria
1. **Functional**: ‚ùå Say "Hey Jarvis" ‚Üí Audio captured and ready for streaming
2. **Performance**: ‚úÖ < 150ms from wake-word to audio clip ready
3. **Reliability**: ‚úÖ 99% uptime, graceful error recovery
4. **Deployment**: ‚úÖ One-command deployment works reliably
5. **Testing**: ‚úÖ All automated tests pass

### Phase 1b Goals (Next Phase)
- Jetson Orin integration
- Real-time streaming to Jetson
- Advanced audio processing
- Multi-room support

## üö´ BLOCKERS & DEPENDENCIES

### Current Blockers
- ‚ùå **WAKE WORD DETECTION BROKEN** - This is blocking all voice control functionality

### Dependencies
- ‚úÖ USB microphone on Pi (hardware) - **WORKING**
- ‚úÖ Porcupine model file (orac.ppn) - **WORKING** (using OpenWakeWord)
- üîÑ Jetson Orin Nano (for Phase 1b) - **PENDING**

### Risk Mitigation
- ‚úÖ Test with mock audio if microphone unavailable - **COMPLETE**
- ‚úÖ Use sample Porcupine model for initial testing - **COMPLETE**
- ‚úÖ Implement fallback audio sources - **COMPLETE**

## üìä PROGRESS TRACKING

### Phase 1a Progress: 85% Complete ‚ö†Ô∏è
- ‚úÖ Infrastructure: 100%
- ‚úÖ Docker Setup: 100%
- ‚úÖ Dependencies: 100%
- ‚úÖ Core Application: 85%
- ‚úÖ Testing: 100%
- ‚úÖ Documentation: 100%
- ‚ùå **BLOCKED**: Wake word detection broken

### Next Sprint Goals (Phase 1b - 1-2 weeks)
1. üî• **URGENT**: Fix wake word detection issue
2. üîÑ Jetson Orin Nano setup and configuration
3. üîÑ Real-time audio streaming to Jetson
4. üîÑ Advanced audio processing pipeline
5. üîÑ Multi-room audio support
6. üîÑ Enhanced wake word models and accuracy 